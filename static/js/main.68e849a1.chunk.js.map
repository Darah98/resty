{"version":3,"sources":["Components/IF/index.js","Components/Results/results.js","Components/form/form.js","Components/History/history.js","Components/Header/header.js","Components/Footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["render","condition","children","If","props","React","Children","map","child","cloneElement","Then","Results","state","nothing","this","count","src","headers","theme","results","Component","Form","submitHandler","e","a","preventDefault","method","url","request","setState","target","reset","getReq","updateReq","deleteReq","alert","history","savedHistory","changeHandler","value","selectHandler","id","bodyHandler","reqbody","fetch","rawData","json","jsonData","get","resHeaders","push","response","localStorage","setItem","JSON","stringify","handler","console","error","bodyObj","body","obj","parse","getItem","onSubmit","htmlFor","type","placeholder","onChange","name","onClick","rows","cols","data","index","key","History","localhistory","Header","to","Footer","App","updateHandler","resultData","headersType","historyHandler","className","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.68e849a1.chunk.js","sourcesContent":["import React from 'react';\n\nconst render = (condition = false, children = null) => {\n  return condition ? children : null;\n};\nexport const If = (props) => {\n  return React.Children.map(props.children, (child) => {\n    return React.cloneElement(child, { condition: props.condition });\n  });\n};\n\nexport const Then = (props) => render(props.condition, props.children);\nexport const Else = (props) => render(!props.condition, props.children);","import React from 'react';\nimport ReactJson from 'react-json-view'\n\nclass Results extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { nothing: 'nothing to see here' };\n    }\n    render() {\n        return (\n            <>\n                <section>\n                    <p>Count: {this.props.count}</p>\n                    <span>Headers:</span><ReactJson src={this.props.headers} theme=\"bright\"/>\n                    <span>Results:</span><ReactJson src={this.props.results} theme=\"bright\"/>\n                </section>\n            </>\n        )\n    }\n}\n\nexport default Results;","import React from 'react';\nimport './form.scss';\n\nclass Form extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { url: '', method: 'get', request: {}, reqbody: {} }\n        if (!JSON.parse(localStorage.getItem('history'))) {\n            localStorage.setItem('history', JSON.stringify(this.history));\n        }\n    }\n    submitHandler = async (e) => {\n        e.preventDefault();\n        if (this.state.method && this.state.url) {\n            let request = { url: this.state.url, method: this.state.method };\n            let url = '';\n            let method = '';\n            this.setState({ request, url, method });\n            e.target.reset();\n            if (this.state.method === 'get') {\n                await this.getReq(e);\n            } else if (this.state.method === 'post' || this.state.method == 'put') {\n                await this.updateReq(e);\n            } else if (this.state.method === 'delete') {\n                await this.deleteReq(e);\n            }\n        } else {\n            alert('Please insert url and method');\n        }\n        this.props.history(this.savedHistory);\n    }\n    changeHandler = (e) => {\n        const url = e.target.value;\n        this.setState({ url });\n    }\n    selectHandler = (e) => {\n        const method = e.target.id;\n        this.setState({ method });\n    }\n    bodyHandler = (e) => {\n        const reqbody = e.target.value;\n        this.setState({ reqbody });\n    }\n    history = [];\n    getReq = async (e) => {\n        try {\n            const rawData = await fetch(this.state.url);\n            const jsonData = await rawData.json();\n            const resHeaders = await rawData.headers.get('Content-Type');\n            this.history.push({ request: this.state.request, response: jsonData });\n            localStorage.setItem('history', JSON.stringify(this.history));\n            this.props.handler(jsonData, resHeaders);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n    updateReq = async (e) => {\n        try {\n            const bodyObj = {\n                body: JSON.stringify(this.state.reqbody),\n                headers: { \"Content-Type\": \"application/json\" },\n                method: this.state.method,\n            }\n            const rawData = await fetch(this.state.url, bodyObj);\n            const jsonData = await rawData.json();\n            const resHeaders = await rawData.headers.get('Content-Type');\n            this.history.push({ request: this.state.request, response: jsonData });\n            localStorage.setItem('history', JSON.stringify(this.history));\n            this.props.handler(jsonData, resHeaders);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n    deleteReq = async (e) => {\n        try {\n            const obj = {\n                headers: { \"Content-Type\": \"application/json\" },\n                method: this.state.method,\n            }\n            const rawData = await fetch(this.state.url, obj);\n            const jsonData = await rawData.json();\n            const resHeaders = await rawData.headers.get('Content-Type');\n            this.history.push({ request: this.state.request, response: jsonData });\n            localStorage.setItem('history', JSON.stringify(this.history));\n            this.props.handler(jsonData, resHeaders);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n    savedHistory = JSON.parse(localStorage.getItem('history'));\n    render() {\n        return (\n            <>\n                <form onSubmit={this.submitHandler}>\n                    <div><label htmlFor=\"url\">URL:  </label>\n                        <input id='url' type='text' placeholder='Enter URL here' onChange={this.changeHandler}></input>\n                        <p id=\"ex\">example: https://swapi.dev/api/people/</p>\n                        <button id='go' type='submit'>GO!</button>\n                        <p>Please select your method:</p>\n                        <input type=\"radio\" id=\"get\" name=\"method\" value=\"get\" onClick={this.selectHandler}></input>\n                        <label htmlFor=\"get\">GET</label>\n                        <input type=\"radio\" id=\"post\" name=\"method\" value=\"post\" onClick={this.selectHandler}></input>\n                        <label htmlFor=\"post\">POST</label>\n                        <input type=\"radio\" id=\"put\" name=\"method\" value=\"put\" onClick={this.selectHandler}></input>\n                        <label htmlFor=\"put\">PUT</label>\n                        <input type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\" onClick={this.selectHandler}></input>\n                        <label htmlFor=\"delete\">DELETE</label>\n                    </div>\n                    <div>\n                        <label htmlFor=\"requestBody\">Body:</label>\n                        <textarea id=\"requestBody\" rows=\"8\" cols=\"80\" onChange={this.bodyHandler}></textarea>\n                    </div>\n                </form>\n                <div id=\"lowersection\">\n                    <div id=\"formResult\"><span>Request:</span><span> {this.state.method}</span><span>{this.state.url}</span>\n                    </div>\n                    <div id=\"historySection\"><label htmlFor=\"history\">History</label>\n                        <ul id=\"history\">\n                            {this.history.map((data, index) => {\n                                return <li key={index}>Method: {data.request.method} <br></br> URL: {data.request.url}</li>\n                            })}\n                        </ul></div>\n                </div>\n            </>\n        )\n    }\n\n}\n\nexport default Form;","import React from 'react';\n\nclass History extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    render() {\n        return (\n            <>\n                <ul>\n                    {this.props.localhistory.map((data, index) => {\n                        return <li key={index}>\n                            Method: {data.request.method}\n                            URL: {data.request.url}\n                            Response: {JSON.stringify(data.response.results)}\n                        </li>\n                    })}\n                </ul>\n            </>\n        )\n    }\n}\n\nexport default History;","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport './header.scss';\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n    render(){\n        return(\n            <>\n            <h1>RESTy</h1>\n            <nav>\n                <ul>\n                    <li>\n                        <NavLink to=\"/\">Home</NavLink>\n                    </li>\n                    <li>\n                        <NavLink to=\"history\">History</NavLink>\n                    </li>\n                </ul>\n            </nav>\n            </>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './footer.scss';\n\nclass Footer extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n    render(){\n        return(\n            <div id='footer'>\n                <p>&copy; CodeFellows 2020</p>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport './App.scss';\nimport { Route } from 'react-router-dom';\nimport { If, Then } from './Components/IF/index.js';\nimport Results from './Components/Results/results.js'\nimport Form from './Components/form/form.js'\nimport History from './Components/History/history.js';\nimport Header from './Components/Header/header.js'\nimport Footer from './Components/Footer/footer.js'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0, headers: { \"headers\": \"not much\" }, results: {}, request: {}, history: [] };\n  }\n  updateHandler = (resultData, headersType) => {\n    const results = resultData.results;\n    const headers = { \"Content-Type\": `${headersType}` };\n    const count = resultData.count;\n    this.setState({ count, headers, results });\n  }\n  historyHandler = (history) => {\n    this.setState({ history });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <main id=\"main\">\n          <Route exact path=\"/\">\n            <div>\n\n            </div>\n            <Form handler={this.updateHandler} history={this.historyHandler} />\n            <If condition={this.state.count}>\n              <Then>\n                <div id=\"container\">\n                <div className=\"loader\"></div>\n                </div>\n                <Results count={this.state.count} headers={this.state.headers} results={this.state.results} />\n              </Then>\n            </If>\n          </Route>\n          <Route exact path=\"/history\">\n            <History localhistory={this.state.history} />\n          </Route>\n        </main>\n        <Footer />\n\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}